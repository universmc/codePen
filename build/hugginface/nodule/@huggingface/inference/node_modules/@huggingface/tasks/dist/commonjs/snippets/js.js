"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.jsSnippets = exports.snippetFile = exports.snippetTextToAudio = exports.snippetTextToImage = exports.snippetZeroShotClassification = exports.snippetTextGeneration = exports.snippetBasic = void 0;
exports.getJsInferenceSnippet = getJsInferenceSnippet;
exports.hasJsInferenceSnippet = hasJsInferenceSnippet;
const common_js_1 = require("./common.js");
const inputs_js_1 = require("./inputs.js");
const snippetBasic = (model, accessToken) => ({
    content: `async function query(data) {
	const response = await fetch(
		"https://api-inference.huggingface.co/models/${model.id}",
		{
			headers: {
				Authorization: "Bearer ${accessToken || `{API_TOKEN}`}",
				"Content-Type": "application/json",
			},
			method: "POST",
			body: JSON.stringify(data),
		}
	);
	const result = await response.json();
	return result;
}

query({"inputs": ${(0, inputs_js_1.getModelInputSnippet)(model)}}).then((response) => {
	console.log(JSON.stringify(response));
});`,
});
exports.snippetBasic = snippetBasic;
const snippetTextGeneration = (model, accessToken, opts) => {
    if (model.tags.includes("conversational")) {
        // Conversational model detected, so we display a code snippet that features the Messages API
        const streaming = opts?.streaming ?? true;
        const exampleMessages = (0, inputs_js_1.getModelInputSnippet)(model);
        const messages = opts?.messages ?? exampleMessages;
        const messagesStr = (0, common_js_1.stringifyMessages)(messages, { indent: "\t" });
        const config = {
            ...(opts?.temperature ? { temperature: opts.temperature } : undefined),
            max_tokens: opts?.max_tokens ?? 500,
            ...(opts?.top_p ? { top_p: opts.top_p } : undefined),
        };
        const configStr = (0, common_js_1.stringifyGenerationConfig)(config, {
            indent: "\n\t",
            attributeValueConnector: ": ",
        });
        if (streaming) {
            return [
                {
                    client: "huggingface.js",
                    content: `import { HfInference } from "@huggingface/inference";

const client = new HfInference("${accessToken || `{API_TOKEN}`}");

let out = "";

const stream = client.chatCompletionStream({
	model: "${model.id}",
	messages: ${messagesStr},
	${configStr}
});

for await (const chunk of stream) {
	if (chunk.choices && chunk.choices.length > 0) {
		const newContent = chunk.choices[0].delta.content;
		out += newContent;
		console.log(newContent);
	}  
}`,
                },
                {
                    client: "openai",
                    content: `import { OpenAI } from "openai";

const client = new OpenAI({
	baseURL: "https://api-inference.huggingface.co/v1/",
    apiKey: "${accessToken || `{API_TOKEN}`}"
});

let out = "";

const stream = await client.chat.completions.create({
	model: "${model.id}",
	messages: ${messagesStr},
	${configStr},
	stream: true,
});

for await (const chunk of stream) {
	if (chunk.choices && chunk.choices.length > 0) {
		const newContent = chunk.choices[0].delta.content;
		out += newContent;
		console.log(newContent);
	}  
}`,
                },
            ];
        }
        else {
            return [
                {
                    client: "huggingface.js",
                    content: `import { HfInference } from "@huggingface/inference";

const client = new HfInference("${accessToken || `{API_TOKEN}`}");

const chatCompletion = await client.chatCompletion({
	model: "${model.id}",
	messages: ${messagesStr},
	${configStr}
});

console.log(chatCompletion.choices[0].message);`,
                },
                {
                    client: "openai",
                    content: `import { OpenAI } from "openai";

const client = new OpenAI({
    baseURL: "https://api-inference.huggingface.co/v1/",
    apiKey: "${accessToken || `{API_TOKEN}`}"
});

const chatCompletion = await client.chat.completions.create({
	model: "${model.id}",
	messages: ${messagesStr},
	${configStr}
});

console.log(chatCompletion.choices[0].message);`,
                },
            ];
        }
    }
    else {
        return (0, exports.snippetBasic)(model, accessToken);
    }
};
exports.snippetTextGeneration = snippetTextGeneration;
const snippetZeroShotClassification = (model, accessToken) => ({
    content: `async function query(data) {
	const response = await fetch(
		"https://api-inference.huggingface.co/models/${model.id}",
		{
			headers: {
				Authorization: "Bearer ${accessToken || `{API_TOKEN}`}",
				"Content-Type": "application/json",
			},
			method: "POST",
			body: JSON.stringify(data),
		}
	);
	const result = await response.json();
	return result;
}

query({"inputs": ${(0, inputs_js_1.getModelInputSnippet)(model)}, "parameters": {"candidate_labels": ["refund", "legal", "faq"]}}).then((response) => {
	console.log(JSON.stringify(response));
});`,
});
exports.snippetZeroShotClassification = snippetZeroShotClassification;
const snippetTextToImage = (model, accessToken) => ({
    content: `async function query(data) {
	const response = await fetch(
		"https://api-inference.huggingface.co/models/${model.id}",
		{
			headers: {
				Authorization: "Bearer ${accessToken || `{API_TOKEN}`}",
				"Content-Type": "application/json",
			},
			method: "POST",
			body: JSON.stringify(data),
		}
	);
	const result = await response.blob();
	return result;
}
query({"inputs": ${(0, inputs_js_1.getModelInputSnippet)(model)}}).then((response) => {
	// Use image
});`,
});
exports.snippetTextToImage = snippetTextToImage;
const snippetTextToAudio = (model, accessToken) => {
    const commonSnippet = `async function query(data) {
		const response = await fetch(
			"https://api-inference.huggingface.co/models/${model.id}",
			{
				headers: {
					Authorization: "Bearer ${accessToken || `{API_TOKEN}`}",
					"Content-Type": "application/json",
				},
				method: "POST",
				body: JSON.stringify(data),
			}
		);`;
    if (model.library_name === "transformers") {
        return {
            content: commonSnippet +
                `
			const result = await response.blob();
			return result;
		}
		query({"inputs": ${(0, inputs_js_1.getModelInputSnippet)(model)}}).then((response) => {
			// Returns a byte object of the Audio wavform. Use it directly!
		});`,
        };
    }
    else {
        return {
            content: commonSnippet +
                `
			const result = await response.json();
			return result;
		}
		
		query({"inputs": ${(0, inputs_js_1.getModelInputSnippet)(model)}}).then((response) => {
			console.log(JSON.stringify(response));
		});`,
        };
    }
};
exports.snippetTextToAudio = snippetTextToAudio;
const snippetFile = (model, accessToken) => ({
    content: `async function query(filename) {
	const data = fs.readFileSync(filename);
	const response = await fetch(
		"https://api-inference.huggingface.co/models/${model.id}",
		{
			headers: {
				Authorization: "Bearer ${accessToken || `{API_TOKEN}`}",
				"Content-Type": "application/json",
			},
			method: "POST",
			body: data,
		}
	);
	const result = await response.json();
	return result;
}

query(${(0, inputs_js_1.getModelInputSnippet)(model)}).then((response) => {
	console.log(JSON.stringify(response));
});`,
});
exports.snippetFile = snippetFile;
exports.jsSnippets = {
    // Same order as in js/src/lib/interfaces/Types.ts
    "text-classification": exports.snippetBasic,
    "token-classification": exports.snippetBasic,
    "table-question-answering": exports.snippetBasic,
    "question-answering": exports.snippetBasic,
    "zero-shot-classification": exports.snippetZeroShotClassification,
    translation: exports.snippetBasic,
    summarization: exports.snippetBasic,
    "feature-extraction": exports.snippetBasic,
    "text-generation": exports.snippetTextGeneration,
    "image-text-to-text": exports.snippetTextGeneration,
    "text2text-generation": exports.snippetBasic,
    "fill-mask": exports.snippetBasic,
    "sentence-similarity": exports.snippetBasic,
    "automatic-speech-recognition": exports.snippetFile,
    "text-to-image": exports.snippetTextToImage,
    "text-to-speech": exports.snippetTextToAudio,
    "text-to-audio": exports.snippetTextToAudio,
    "audio-to-audio": exports.snippetFile,
    "audio-classification": exports.snippetFile,
    "image-classification": exports.snippetFile,
    "image-to-text": exports.snippetFile,
    "object-detection": exports.snippetFile,
    "image-segmentation": exports.snippetFile,
};
function getJsInferenceSnippet(model, accessToken, opts) {
    return model.pipeline_tag && model.pipeline_tag in exports.jsSnippets
        ? exports.jsSnippets[model.pipeline_tag]?.(model, accessToken, opts) ?? { content: "" }
        : { content: "" };
}
function hasJsInferenceSnippet(model) {
    return !!model.pipeline_tag && model.pipeline_tag in exports.jsSnippets;
}
