const express = require('express');
const app = express();

const port = 98;

// DÃ¨s qu'un message est reÃ§u depuis le thread principal
process.on('message', (event, data) => {
  // Effectuez une tÃ¢che asynchrone (exemple : rÃ©cupÃ©rer des tÃ¢ches Ã  partir d'une API)
  const tasks = getTasks(); // Remplacez cette fonction par votre logique de rÃ©cupÃ©ration des tÃ¢ches

  // Envoie la rÃ©ponse au thread principal
  process.send({ tasks: tasks });
});

function getTasks() {
  // Votre logique pour rÃ©cupÃ©rer les tÃ¢ches Ã  partir de votre source de donnÃ©es
  // Exemple :
  return [
    { title: 'TÃ¢che 1', dueDate: '2023-02-15' },
    { title: 'TÃ¢che 2', dueDate: '2023-02-20' },
    // ...
  ];
}

app.get("/cpu", (req, res) => {
  
    let total = 0;
    for (let i = 0; i < 6_000_000; i++) {
      total++;
    }
    res.send(`The result of the CPU intensive task is ${total}\n`);
  },
);

  
  app.listen(port, () => {
    console.log(``);
    console.log(`[  ðŸ“¡  ] < - - - - - - - - - - - - - : ðŸ›° [${port} %] `);
  });

console.log(`âœ¨âœ¨ Lancement du Web Workers SYSTEM:${process.pid} âœ¨ `);