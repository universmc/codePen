import torch
import tkinter
import hashlib
import time
import cv2

# Convertir le bloc de pixel qubit_('β|0>') de pixels en une chaîne de caractères
def qubit_0 = """

    █████████████████████████████████
    ██░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
    ██░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
    ██░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
    ██░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
    ██░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
    ██░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
    ██░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
    ██░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
    ██░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
    ██░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
    ██░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
    ██░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
    ██░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
    █████████████████████████████████
"""
# Convertir la chaîne de caractères en bytes pour le calcul du hash MD5
pixels = qubit_1.encode('utf-8')

# Calculer le hash MD5 du bloc de pixels
hash_object = hashlib.md5()
hash_object.update(pixels)
hash_value = hash_object.hexdigest()

print("Hash du bloc de pixels : ", hash_value)

# Convertir le bloc qubit_('β|1>')": de pixels en une chaîne de caractères
def qubit_1 = """
     ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
     ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
     ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
     ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
     ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
     ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
     ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
     ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
     ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
     ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
     ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
     ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
     ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
     ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
     ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
"""
# Convertir la chaîne de caractères en bytes pour le calcul du hash MD5
pixels = qubit_1.encode('utf-8')

# Calculer le hash MD5 du bloc de pixels
hash_object = hashlib.md5()
hash_object.update(pixels)
hash_value = hash_object.hexdigest()

print("Hash du bloc de pixels : ", hash_value)

import hashlib

# Convertir le bloc de pixels vide en une chaîne de caractères
pixels_vide = """
    █████████████████████████████████
    ██░░░░░░░░░░░░░░░░░░░░░░░░░░░░░██
    ██░░░░░░░░░░░░░░░░░░░░░░░░░░░░░██
    ██░░░░░░░░░░░░░░░░░░░░░░░░░░░░░██
    ██░░░░░░░░░░░░░░░░░░░░░░░░░░░░░██
    ██░░░░░░░░░░░░░░░░░░░░░░░░░░░░░██
    ██░░░░░░░░░░░░░░░░░░░░░░░░░░░░░██
    ██░░░░░░░░░░░░░░░░░░░░░░░░░░░░░██
    ██░░░░░░░░░░░░░░░░░░░░░░░░░░░░░██
    ██░░░░░░░░░░░░░░░░░░░░░░░░░░░░░██
    ██░░░░░░░░░░░░░░░░░░░░░░░░░░░░░██
    ██░░░░░░░░░░░░░░░░░░░░░░░░░░░░░██
    ██░░░░░░░░░░░░░░░░░░░░░░░░░░░░░██
    ██░░░░░░░░░░░░░░░░░░░░░░░░░░░░░██
    ██░░░░░░░░░░░░░░░░░░░░░░░░░░░░░██
    ██░░░░░░░░░░░░░░░░░░░░░░░░░░░░░██
    ██░░░░░░░░░░░░░░░░░░░░░░░░░░░░░██
    █████████████████████████████████
"""

import hashlib

# Convertir le bloc de pixels en une chaîne de caractères
pixels_plein = """
    █████████████████████████████████
    █████████████████████████████████
    █████████████████████████████████
    █████████████████████████████████
    █████████████████████████████████
    █████████████████████████████████
    █████████████████████████████████
    █████████████████████████████████
    █████████████████████████████████
    █████████████████████████████████
    █████████████████████████████████
    █████████████████████████████████
    █████████████████████████████████
    █████████████████████████████████
    █████████████████████████████████
    █████████████████████████████████
    █████████████████████████████████
    █████████████████████████████████
"""

# Calculer le hash MD5 du bloc de pixels
hash_object = hashlib.md5()
hash_object.update(pixels.encode('utf-8'))
hash_value = hash_object.hexdigest()

print("Hash du bloc de pixels : ", hash_value)

# Calculer le hash MD5 du bloc de pixels
hash_object = hashlib.md5()
hash_object.update(pixels.encode('utf-8'))
hash_value = hash_object.hexdigest()

print("Hash du bloc de pixels : ", hash_value)

# Chaînes de caractères pour représenter l'animation de chargement et les pourcentages
loading_chars = "██░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░"
percentages = range(0, 101, 1)

# Fonction pour générer l'animation de chargement du setup
def run_loading():
    for percentage in percentages:
        # Calculer le nombre de caractères pleins en fonction du pourcentage
        filled_chars = int(percentage / 10)
        loading_string = loading_chars[:filled_chars] + " " * (10 - filled_chars)
        print("\rLoading: {}% {}".format(percentage, loading_string), end="")
        time.sleep(0.1)

# Exécuter l'animation de chargement
run_loading()
