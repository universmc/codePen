// Importation des modules n√©cessaires
const fs = require("fs");
const Groq = require("groq-sdk");
const groq = new Groq({ apiKey: process.env.GROQ_API_KEY });

/**
 * G√©n√®re une liste de th√©matiques via le r√¥le system.
 * @returns {Promise<string[]>} - Liste des th√©matiques g√©n√©r√©es.
 */

  const LicencesCreativeCommons = `
L‚Äôun des objectifs de Creative Commons est d‚Äôaccro√Ætre la quantit√© de cr√©ation sous licence libre dans ¬´ les biens communs ¬ª, c‚Äôest-√†-dire l‚Äôensemble des ≈ìuvres librement disponibles pour une utilisation, un partage, une r√©utilisation et un remixage l√©gaux. 
Gr√¢ce √† l‚Äôutilisation des licences CC, des millions de personnes dans le monde entier ont mis leurs photos, vid√©os, √©crits, musiques et autres contenus cr√©atifs √† la disposition de tous les membres du public.
  `;

  const image = `url("./image/*")`
  const text = `url("./text/*")`
  const video = `url("./video/*")`
  const audio = `url("./audio/*")`
 
  const remixage = `(${audio},${video},${image},${text}`

 const question =`comment augmenter en productivit√© gr√¢ce a des m√©thodes de DeeP Learning et l'automatisation de la g√©n√©ration de contenu les ${LicencesCreativeCommons} ?`;
async function generateThemes() {
  try {
    const completion = await groq.chat.completions.create({
      messages: [
        { role: "system", content: `G√©n√©ration d'une liste de 11 titres d'Article üí° pour la gestion et le devellepement de session de ${remixage} de contenu, la liste de titre sera utlis√© pour le developpement des ${LicencesCreativeCommons} ` }
      ],
      model: "gemma2-9b-it",
      temperature: 0.5,
      max_tokens: 56, // Limiter pour obtenir une liste concise
    });

    const themes = completion.choices[0]?.message?.content.split("\n").filter(Boolean);
    console.log("‚úÖ Th√©matiques g√©n√©r√©es :", themes);
    return themes;
  } catch (error) {
    console.error("‚ùå Erreur lors de la g√©n√©ration des th√©matiques :", error);
    return [];
  }
}

/**
 * G√©n√®re un article complet en fonction d'une th√©matique via le r√¥le assistant.
 * @param {string} theme - La th√©matique pour laquelle g√©n√©rer l'article.
 * @returns {Promise<string>} - Contenu de l'article g√©n√©r√©.
 */
async function generateArticle(theme) {
  try {
    const completion = await groq.chat.completions.create({
      messages: [
        { role: "assistant", content: `G√©n√©ration de l'article en fonction des titres lier "${theme}" chaque article sera r√©dig√© au format Markdown, int√©grant des EMOJI Intelligent et des conseils pour le d√©veloppement des diff√©rents services, li√©s √† l'intelligence artificielle dans l'article intrins√®quement li√© √† la ${question}.` }
      ],
      model: "mixtral-8x7b-32768",
      temperature: 0.5,
      max_tokens: 4096, // Autoriser un contenu riche et d√©taill√©
    });

    const articleContent = completion.choices[0]?.message?.content;
    console.log(`‚úÖ Article g√©n√©r√© pour le th√®me "${theme}" :`, articleContent);
    return articleContent;
  } catch (error) {
    console.error(`‚ùå Erreur lors de la g√©n√©ration de l'article pour "${theme}" :`, error);
    return `Erreur lors de la g√©n√©ration de l'article pour le th√®me "${theme}".`;
  }
}

/**
 * Fonction principale pour orchestrer la g√©n√©ration des th√©matiques et des articles.
 */
async function main() {
  try {
    // G√©n√©ration de la liste des th√©matiques
    const themes = await generateThemes();

    // G√©n√©ration des articles pour chaque th√©matique
    for (const theme of themes) {
      const articleContent = await generateArticle(theme);

      // Enregistrement de l'article dans un fichier Markdown
      const outputFilePath = `articles/${theme.replace(/\s+/g, "_").toLowerCase()}_${new Date().toISOString().replace(/[-:TZ]/g, "")}.md`;
      fs.writeFileSync(outputFilePath, articleContent);

      console.log(`‚úÖ Article sauvegard√© : ${outputFilePath}`);
    }
  } catch (error) {
    console.error("‚ùå Une erreur s'est produite lors de l'ex√©cution du script :", error);
  }
}

main();
